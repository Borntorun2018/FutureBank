package com.eBusiness.service;

import static org.junit.Assert.*;
import static org.mockito.Mockito.when;


import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.*;
import com.eBusiness.persist.entity.accounts.Account;
import com.eBusiness.persist.repo.accounts.AccountRepository;
import com.eBusiness.service.impl.accounts.AccountServiceImpl;

@RunWith(MockitoJUnitRunner.class)
public class AccountServiceTest {

	private static final Long TEST_ID = new Long(-1);
	private Account account1;
	
	@Mock AccountRepository accountRepoMock;
	
	@InjectMocks AccountServiceImpl accountService;
	
	@Before
	public void before() {
		System.out.println("before stuff.");
		account1 = new Account();
	}
	
	@After
	public void after() {
		System.out.println("after stuff.");
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void getAccountByIdFail() {
		accountService.getAccountById(null);
	}
	
	@Test
	public void getAccountByIdSuccess() {
		
		when(accountRepoMock.getOne(TEST_ID)).thenReturn(account1);

		Account account = null;
		try{
			account = accountService.getAccountById(TEST_ID);
		}
		catch(Exception e) {
			fail("getAccountById - "+e.getMessage());
		}
		
		assertNotNull(account);
	}
	
}
